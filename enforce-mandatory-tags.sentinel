import "tfplan/v2" as tfplan
import "tfconfig/v2" as tfconfig
import "strings"
import "json"

mandatory_tags = [
    "owner",
    "se-region",
    "purpose",
    "ttl",
    "terraform",
]

providers = []

for tfconfig.providers as p {
    append(providers, tfconfig.providers[p].name)
}

provider = "aws"

has_tags = func(tags) {
    // assigned_tags = []
    // empty_tags = []
    // missing_tags = []
    taggable = []
    non_taggable = []
    // tagged = []
    // untagged = []
    retval = true

    for tfplan.planned_values.resources as r {
        if "tags" in tfplan.planned_values.resources[r].values and tfplan.planned_values.resources[r].mode != "data" {
            if tfplan.planned_values.resources[r].values["tags"] == null {
                rtags = {
                    "assigned_tags": [],
                    "missing_tags": tags,
                    "empty_tags": [],
                }
                retval = false
            } else {
                rtags = {}
                etags = []
                mtags = []
                atags = []
                for tfplan.planned_values.resources[r].values["tags"] as tag {
                    val = tfplan.planned_values.resources[r].values["tags"][tag]
                    if val == "" or val == null {
                        append(etags, tag)
                    } else {
                        append(atags, tag)
                    }
                }
                for tags as t {
                    if t not in atags {
                        append(mtags, t)
                        retval = false
                    }
                }
                rtags = {
                    "assigned_tags": atags,
                    "missing_tags": mtags,
                    "empty_tags": etags,
                }
            }
            append(taggable, { r: rtags, })
        } else {
            append(non_taggable, r)
        }
    }

    resources = {
        "taggable_resources": taggable,
        "non_taggable_resources": non_taggable,
    }

    print("Tagging results:")
    print("----------------")
    print(json.marshal(resources))

    return retval
}

if ("aws" in providers) {
    result = has_tags(mandatory_tags)
} else {
    print("This policy is for a different provider and will not be processed")
    result = true
}

main = rule { result }
